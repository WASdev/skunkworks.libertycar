buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.hidetake:gradle-ssh-plugin:2.7.0"
    //classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0'
    classpath files('../ci.gradle/build/libs/liberty-gradle-plugin-1.1-SNAPSHOT.jar')
    classpath files('../ci.ant/target/wlp-anttasks-1.3-SNAPSHOT.jar')
    //classpath files('build/wlp/lib/com.ibm.ws.kernel.boot_1.0.15.jar')
    classpath files('build/wlp/bin/tools/ws-server.jar')
  }
}

import groovy.xml.*

apply plugin: 'org.hidetake.ssh'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'liberty'

war {
  archiveName = 'LibertyCar.war'
}

eclipse {
  classpath {
    defaultOutputDir = file("${buildDir}/eclipse-classes/default")
    file {
      beforeMerged { classpath -> 
        classpath.entries.clear()
      }
      whenMerged {  cp -> 
        cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/main/") }*.output = "build/eclipse-classes/main" 
        cp.entries.findAll { it.kind == "src" && it.path.startsWith("src/test/") }*.output = "build/eclipse-classes/test" 
      }
    }
  }
}
    
liberty {
  installDir = "${buildDir}/wlp"
  serverName = 'defaultServer'
  install {
    version = '16.0.0_04'
  }

  packageLiberty {
    archive = "${buildDir}/LibertyCar.zip"
    include = "minify"
  }
}

remotes {
  carPiHost {
    host = '192.168.168.4'
    user = 'pi'
    password = 'raspberry'
    knownHosts = allowAnyHosts
  }
}

task uploadWar {
  doLast{
    ssh.run {
      session(remotes.carPiHost) {
        put from: "${war.archivePath}", into: '/home/pi/wlp/usr/servers/defaultServer/apps/LibertyCar.war'
      }
    }
  }
}

task uploadPackage {
  doLast{
    ssh.run {
      session(remotes.carPiHost) {
        put from: "${buildDir}/LibertyCar.zip", into: '/home/pi/LibertyCar.zip'
        execute "rm -rf /home/pi/wlp"
        execute "unzip /home/pi/LibertyCar.zip"
      }
    }
  }
}

repositories {
  mavenCentral()
}

dependencies {
  providedCompile files(fileTree(dir: "${buildDir}/wlp/dev/api/spec", include: '*.jar')) {
    builtBy 'installLiberty'
  }

  compile 'com.pi4j:pi4j-core:1.1'
  compile 'com.pi4j:pi4j-device:1.1'
  compile 'com.pi4j:pi4j-gpio-extension:1.1'
  compile 'com.pi4j:pi4j-service:1.1'
  compile 'com.google.code.gson:gson:2.8.0'

  testCompile 'junit:junit:4.12'
}

task copyUsrDir(type: Copy) {
  from 'src/main/wlp/usr'
  into "${buildDir}/wlp/usr"
}

task deployAppToAppsDir(type: Copy, dependsOn: ['assemble', 'copyUsrDir']) {
  from "${war.archivePath}"
  into "${buildDir}/wlp/usr/servers/defaultServer/apps"
}

tasks.compileJava.dependsOn installLiberty
tasks.eclipseClasspath.dependsOn installLiberty

build.dependsOn libertyPackage
libertyPackage.dependsOn deployAppToAppsDir

//task looseConfig(dependsOn : ['copyUsrDir', 'libertyStart']) {
task looseConfig() {
  doLast {
    def writer = new StringWriter()
    def looseConfigFile = new MarkupBuilder(writer)
    looseConfigFile.mkp.xmlDeclaration(version:'1.0', encoding: 'UTF-8' )
    looseConfigFile.archive {
      dir(sourceOnDisk: "${webAppDir}", targetInArchive: "/"){}
      dir(sourceOnDisk: "${buildDir}/eclipse-classes/main", targetInArchive: "/WEB-INF/classes"){}
      dir(sourceOnDisk: "${buildDir}/webLibs", targetInArchive: "/WEB-INF/lib"){}
    }
    println writer

    FileWriter fw = new FileWriter("${buildDir}/wlp/usr/servers/defaultServer/apps/LibertyCar.war.xml");
    fw.write(writer.toString());
    fw.close();
  }
}

task generateWebInfLib(type: Copy) {
  into "${buildDir}/webLibs"
  from configurations.compile - configurations.providedCompile
}